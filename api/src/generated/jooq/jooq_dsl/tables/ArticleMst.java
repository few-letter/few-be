/*
 * This file is generated by jOOQ.
 */
package jooq.jooq_dsl.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import jooq.jooq_dsl.DefaultSchema;
import jooq.jooq_dsl.Indexes;
import jooq.jooq_dsl.Keys;
import jooq.jooq_dsl.tables.records.ArticleMstRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ArticleMst extends TableImpl<ArticleMstRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ARTICLE_MST</code>
     */
    public static final ArticleMst ARTICLE_MST = new ArticleMst();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ArticleMstRecord> getRecordType() {
        return ArticleMstRecord.class;
    }

    /**
     * The column <code>ARTICLE_MST.ID</code>.
     */
    public final TableField<ArticleMstRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>ARTICLE_MST.MEMBER_ID</code>.
     */
    public final TableField<ArticleMstRecord, Long> MEMBER_ID = createField(DSL.name("MEMBER_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>ARTICLE_MST.MAIN_IMAGE_URL</code>.
     */
    public final TableField<ArticleMstRecord, String> MAIN_IMAGE_URL = createField(DSL.name("MAIN_IMAGE_URL"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>ARTICLE_MST.TITLE</code>.
     */
    public final TableField<ArticleMstRecord, String> TITLE = createField(DSL.name("TITLE"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>ARTICLE_MST.CATEGORY_CD</code>.
     */
    public final TableField<ArticleMstRecord, Byte> CATEGORY_CD = createField(DSL.name("CATEGORY_CD"), SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>ARTICLE_MST.CREATED_AT</code>.
     */
    public final TableField<ArticleMstRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>ARTICLE_MST.DELETED_AT</code>.
     */
    public final TableField<ArticleMstRecord, LocalDateTime> DELETED_AT = createField(DSL.name("DELETED_AT"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "");

    private ArticleMst(Name alias, Table<ArticleMstRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ArticleMst(Name alias, Table<ArticleMstRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>ARTICLE_MST</code> table reference
     */
    public ArticleMst(String alias) {
        this(DSL.name(alias), ARTICLE_MST);
    }

    /**
     * Create an aliased <code>ARTICLE_MST</code> table reference
     */
    public ArticleMst(Name alias) {
        this(alias, ARTICLE_MST);
    }

    /**
     * Create a <code>ARTICLE_MST</code> table reference
     */
    public ArticleMst() {
        this(DSL.name("ARTICLE_MST"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ARTICLE_MST_IDX1);
    }

    @Override
    public Identity<ArticleMstRecord, Long> getIdentity() {
        return (Identity<ArticleMstRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ArticleMstRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_B;
    }

    @Override
    public ArticleMst as(String alias) {
        return new ArticleMst(DSL.name(alias), this);
    }

    @Override
    public ArticleMst as(Name alias) {
        return new ArticleMst(alias, this);
    }

    @Override
    public ArticleMst as(Table<?> alias) {
        return new ArticleMst(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ArticleMst rename(String name) {
        return new ArticleMst(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ArticleMst rename(Name name) {
        return new ArticleMst(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ArticleMst rename(Table<?> name) {
        return new ArticleMst(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ArticleMst where(Condition condition) {
        return new ArticleMst(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ArticleMst where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ArticleMst where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ArticleMst where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ArticleMst where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ArticleMst where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ArticleMst where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ArticleMst where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ArticleMst whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ArticleMst whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
