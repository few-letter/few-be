/*
 * This file is generated by jOOQ.
 */
package jooq.jooq_dsl.tables;


import java.time.LocalDateTime;
import java.util.Collection;

import jooq.jooq_dsl.DefaultSchema;
import jooq.jooq_dsl.Keys;
import jooq.jooq_dsl.tables.records.ArticleMainCardRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ArticleMainCard extends TableImpl<ArticleMainCardRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ARTICLE_MAIN_CARD</code>
     */
    public static final ArticleMainCard ARTICLE_MAIN_CARD = new ArticleMainCard();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ArticleMainCardRecord> getRecordType() {
        return ArticleMainCardRecord.class;
    }

    /**
     * The column <code>ARTICLE_MAIN_CARD.ID</code>.
     */
    public final TableField<ArticleMainCardRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>ARTICLE_MAIN_CARD.TITLE</code>.
     */
    public final TableField<ArticleMainCardRecord, String> TITLE = createField(DSL.name("TITLE"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>ARTICLE_MAIN_CARD.MAIN_IMAGE_URL</code>.
     */
    public final TableField<ArticleMainCardRecord, String> MAIN_IMAGE_URL = createField(DSL.name("MAIN_IMAGE_URL"), SQLDataType.VARCHAR(1000).nullable(false), this, "");

    /**
     * The column <code>ARTICLE_MAIN_CARD.CATEGORY_CD</code>.
     */
    public final TableField<ArticleMainCardRecord, Byte> CATEGORY_CD = createField(DSL.name("CATEGORY_CD"), SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>ARTICLE_MAIN_CARD.CREATED_AT</code>.
     */
    public final TableField<ArticleMainCardRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>ARTICLE_MAIN_CARD.WRITER_ID</code>.
     */
    public final TableField<ArticleMainCardRecord, Long> WRITER_ID = createField(DSL.name("WRITER_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>ARTICLE_MAIN_CARD.WRITER_EMAIL</code>.
     */
    public final TableField<ArticleMainCardRecord, String> WRITER_EMAIL = createField(DSL.name("WRITER_EMAIL"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>ARTICLE_MAIN_CARD.WRITER_DESCRIPTION</code>.
     */
    public final TableField<ArticleMainCardRecord, JSON> WRITER_DESCRIPTION = createField(DSL.name("WRITER_DESCRIPTION"), SQLDataType.JSON.nullable(false).defaultValue(DSL.field(DSL.raw("JSON '{}'"), SQLDataType.JSON)), this, "");

    /**
     * The column <code>ARTICLE_MAIN_CARD.WORKBOOKS</code>.
     */
    public final TableField<ArticleMainCardRecord, JSON> WORKBOOKS = createField(DSL.name("WORKBOOKS"), SQLDataType.JSON.nullable(false).defaultValue(DSL.field(DSL.raw("JSON '{}'"), SQLDataType.JSON)), this, "");

    private ArticleMainCard(Name alias, Table<ArticleMainCardRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ArticleMainCard(Name alias, Table<ArticleMainCardRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>ARTICLE_MAIN_CARD</code> table reference
     */
    public ArticleMainCard(String alias) {
        this(DSL.name(alias), ARTICLE_MAIN_CARD);
    }

    /**
     * Create an aliased <code>ARTICLE_MAIN_CARD</code> table reference
     */
    public ArticleMainCard(Name alias) {
        this(alias, ARTICLE_MAIN_CARD);
    }

    /**
     * Create a <code>ARTICLE_MAIN_CARD</code> table reference
     */
    public ArticleMainCard() {
        this(DSL.name("ARTICLE_MAIN_CARD"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<ArticleMainCardRecord> getPrimaryKey() {
        return Keys.ARTICLE_MAIN_CARD_PK;
    }

    @Override
    public ArticleMainCard as(String alias) {
        return new ArticleMainCard(DSL.name(alias), this);
    }

    @Override
    public ArticleMainCard as(Name alias) {
        return new ArticleMainCard(alias, this);
    }

    @Override
    public ArticleMainCard as(Table<?> alias) {
        return new ArticleMainCard(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ArticleMainCard rename(String name) {
        return new ArticleMainCard(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ArticleMainCard rename(Name name) {
        return new ArticleMainCard(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ArticleMainCard rename(Table<?> name) {
        return new ArticleMainCard(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ArticleMainCard where(Condition condition) {
        return new ArticleMainCard(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ArticleMainCard where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ArticleMainCard where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ArticleMainCard where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ArticleMainCard where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ArticleMainCard where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ArticleMainCard where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ArticleMainCard where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ArticleMainCard whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ArticleMainCard whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
