/*
 * This file is generated by jOOQ.
 */
package jooq.jooq_dsl.tables;


import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import jooq.jooq_dsl.DefaultSchema;
import jooq.jooq_dsl.Indexes;
import jooq.jooq_dsl.Keys;
import jooq.jooq_dsl.tables.records.SubscriptionRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Subscription extends TableImpl<SubscriptionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>SUBSCRIPTION</code>
     */
    public static final Subscription SUBSCRIPTION = new Subscription();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SubscriptionRecord> getRecordType() {
        return SubscriptionRecord.class;
    }

    /**
     * The column <code>SUBSCRIPTION.ID</code>.
     */
    public final TableField<SubscriptionRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>SUBSCRIPTION.MEMBER_ID</code>.
     */
    public final TableField<SubscriptionRecord, Long> MEMBER_ID = createField(DSL.name("MEMBER_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>SUBSCRIPTION.TARGET_MEMBER_ID</code>.
     */
    public final TableField<SubscriptionRecord, Long> TARGET_MEMBER_ID = createField(DSL.name("TARGET_MEMBER_ID"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>SUBSCRIPTION.TARGET_WORKBOOK_ID</code>.
     */
    public final TableField<SubscriptionRecord, Long> TARGET_WORKBOOK_ID = createField(DSL.name("TARGET_WORKBOOK_ID"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>SUBSCRIPTION.CREATED_AT</code>.
     */
    public final TableField<SubscriptionRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>SUBSCRIPTION.DELETED_AT</code>.
     */
    public final TableField<SubscriptionRecord, LocalDateTime> DELETED_AT = createField(DSL.name("DELETED_AT"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>SUBSCRIPTION.UNSUBS_OPINION</code>.
     */
    public final TableField<SubscriptionRecord, String> UNSUBS_OPINION = createField(DSL.name("UNSUBS_OPINION"), SQLDataType.VARCHAR(300), this, "");

    /**
     * The column <code>SUBSCRIPTION.PROGRESS</code>.
     */
    public final TableField<SubscriptionRecord, Long> PROGRESS = createField(DSL.name("PROGRESS"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>SUBSCRIPTION.SEND_TIME</code>.
     */
    public final TableField<SubscriptionRecord, LocalTime> SEND_TIME = createField(DSL.name("SEND_TIME"), SQLDataType.LOCALTIME.defaultValue(DSL.field(DSL.raw("'08:00'"), SQLDataType.LOCALTIME)), this, "");

    /**
     * The column <code>SUBSCRIPTION.SEND_DAY</code>.
     */
    public final TableField<SubscriptionRecord, String> SEND_DAY = createField(DSL.name("SEND_DAY"), SQLDataType.CHAR(10).nullable(false).defaultValue(DSL.field(DSL.raw("'0011111'"), SQLDataType.CHAR)), this, "");

    /**
     * The column <code>SUBSCRIPTION.MODIFIED_AT</code>.
     */
    public final TableField<SubscriptionRecord, LocalDateTime> MODIFIED_AT = createField(DSL.name("MODIFIED_AT"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>SUBSCRIPTION.SEND_AT</code>.
     */
    public final TableField<SubscriptionRecord, LocalDateTime> SEND_AT = createField(DSL.name("SEND_AT"), SQLDataType.LOCALDATETIME(6), this, "");

    private Subscription(Name alias, Table<SubscriptionRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Subscription(Name alias, Table<SubscriptionRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>SUBSCRIPTION</code> table reference
     */
    public Subscription(String alias) {
        this(DSL.name(alias), SUBSCRIPTION);
    }

    /**
     * Create an aliased <code>SUBSCRIPTION</code> table reference
     */
    public Subscription(Name alias) {
        this(alias, SUBSCRIPTION);
    }

    /**
     * Create a <code>SUBSCRIPTION</code> table reference
     */
    public Subscription() {
        this(DSL.name("SUBSCRIPTION"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.SUBSCRIPTION_MEMBER_IDX, Indexes.SUBSCRIPTION_TARGET_WORKBOOK_IDX);
    }

    @Override
    public Identity<SubscriptionRecord, Long> getIdentity() {
        return (Identity<SubscriptionRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<SubscriptionRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_9;
    }

    @Override
    public List<UniqueKey<SubscriptionRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CONSTRAINT_9E, Keys.CONSTRAINT_9E7);
    }

    @Override
    public Subscription as(String alias) {
        return new Subscription(DSL.name(alias), this);
    }

    @Override
    public Subscription as(Name alias) {
        return new Subscription(alias, this);
    }

    @Override
    public Subscription as(Table<?> alias) {
        return new Subscription(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Subscription rename(String name) {
        return new Subscription(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Subscription rename(Name name) {
        return new Subscription(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Subscription rename(Table<?> name) {
        return new Subscription(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Subscription where(Condition condition) {
        return new Subscription(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Subscription where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Subscription where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Subscription where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Subscription where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Subscription where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Subscription where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Subscription where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Subscription whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Subscription whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
