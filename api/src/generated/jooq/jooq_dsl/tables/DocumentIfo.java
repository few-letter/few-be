/*
 * This file is generated by jOOQ.
 */
package jooq.jooq_dsl.tables;


import java.time.LocalDateTime;
import java.util.Collection;

import jooq.jooq_dsl.DefaultSchema;
import jooq.jooq_dsl.Keys;
import jooq.jooq_dsl.tables.records.DocumentIfoRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DocumentIfo extends TableImpl<DocumentIfoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>DOCUMENT_IFO</code>
     */
    public static final DocumentIfo DOCUMENT_IFO = new DocumentIfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DocumentIfoRecord> getRecordType() {
        return DocumentIfoRecord.class;
    }

    /**
     * The column <code>DOCUMENT_IFO.ID</code>.
     */
    public final TableField<DocumentIfoRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>DOCUMENT_IFO.PATH</code>.
     */
    public final TableField<DocumentIfoRecord, String> PATH = createField(DSL.name("PATH"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>DOCUMENT_IFO.ALIAS</code>.
     */
    public final TableField<DocumentIfoRecord, String> ALIAS = createField(DSL.name("ALIAS"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field(DSL.raw("''"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>DOCUMENT_IFO.URL</code>.
     */
    public final TableField<DocumentIfoRecord, String> URL = createField(DSL.name("URL"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>DOCUMENT_IFO.CREATED_AT</code>.
     */
    public final TableField<DocumentIfoRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private DocumentIfo(Name alias, Table<DocumentIfoRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private DocumentIfo(Name alias, Table<DocumentIfoRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>DOCUMENT_IFO</code> table reference
     */
    public DocumentIfo(String alias) {
        this(DSL.name(alias), DOCUMENT_IFO);
    }

    /**
     * Create an aliased <code>DOCUMENT_IFO</code> table reference
     */
    public DocumentIfo(Name alias) {
        this(alias, DOCUMENT_IFO);
    }

    /**
     * Create a <code>DOCUMENT_IFO</code> table reference
     */
    public DocumentIfo() {
        this(DSL.name("DOCUMENT_IFO"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<DocumentIfoRecord, Long> getIdentity() {
        return (Identity<DocumentIfoRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<DocumentIfoRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_32;
    }

    @Override
    public DocumentIfo as(String alias) {
        return new DocumentIfo(DSL.name(alias), this);
    }

    @Override
    public DocumentIfo as(Name alias) {
        return new DocumentIfo(alias, this);
    }

    @Override
    public DocumentIfo as(Table<?> alias) {
        return new DocumentIfo(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DocumentIfo rename(String name) {
        return new DocumentIfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DocumentIfo rename(Name name) {
        return new DocumentIfo(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DocumentIfo rename(Table<?> name) {
        return new DocumentIfo(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DocumentIfo where(Condition condition) {
        return new DocumentIfo(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DocumentIfo where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DocumentIfo where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DocumentIfo where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DocumentIfo where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DocumentIfo where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DocumentIfo where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DocumentIfo where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DocumentIfo whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DocumentIfo whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
