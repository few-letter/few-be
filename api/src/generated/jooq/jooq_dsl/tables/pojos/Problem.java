/*
 * This file is generated by jOOQ.
 */
package jooq.jooq_dsl.tables.pojos;


import java.io.Serializable;
import java.time.LocalDateTime;

import org.jooq.JSON;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Problem implements Serializable {

    private static final long serialVersionUID = 1L;

    private final Long id;
    private final Long articleId;
    private final String title;
    private final JSON contents;
    private final String answer;
    private final String explanation;
    private final Long creatorId;
    private final LocalDateTime createdAt;
    private final LocalDateTime deletedAt;

    public Problem(Problem value) {
        this.id = value.id;
        this.articleId = value.articleId;
        this.title = value.title;
        this.contents = value.contents;
        this.answer = value.answer;
        this.explanation = value.explanation;
        this.creatorId = value.creatorId;
        this.createdAt = value.createdAt;
        this.deletedAt = value.deletedAt;
    }

    public Problem(
        Long id,
        Long articleId,
        String title,
        JSON contents,
        String answer,
        String explanation,
        Long creatorId,
        LocalDateTime createdAt,
        LocalDateTime deletedAt
    ) {
        this.id = id;
        this.articleId = articleId;
        this.title = title;
        this.contents = contents;
        this.answer = answer;
        this.explanation = explanation;
        this.creatorId = creatorId;
        this.createdAt = createdAt;
        this.deletedAt = deletedAt;
    }

    /**
     * Getter for <code>PROBLEM.ID</code>.
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Getter for <code>PROBLEM.ARTICLE_ID</code>.
     */
    public Long getArticleId() {
        return this.articleId;
    }

    /**
     * Getter for <code>PROBLEM.TITLE</code>.
     */
    public String getTitle() {
        return this.title;
    }

    /**
     * Getter for <code>PROBLEM.CONTENTS</code>.
     */
    public JSON getContents() {
        return this.contents;
    }

    /**
     * Getter for <code>PROBLEM.ANSWER</code>.
     */
    public String getAnswer() {
        return this.answer;
    }

    /**
     * Getter for <code>PROBLEM.EXPLANATION</code>.
     */
    public String getExplanation() {
        return this.explanation;
    }

    /**
     * Getter for <code>PROBLEM.CREATOR_ID</code>.
     */
    public Long getCreatorId() {
        return this.creatorId;
    }

    /**
     * Getter for <code>PROBLEM.CREATED_AT</code>.
     */
    public LocalDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Getter for <code>PROBLEM.DELETED_AT</code>.
     */
    public LocalDateTime getDeletedAt() {
        return this.deletedAt;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Problem other = (Problem) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.articleId == null) {
            if (other.articleId != null)
                return false;
        }
        else if (!this.articleId.equals(other.articleId))
            return false;
        if (this.title == null) {
            if (other.title != null)
                return false;
        }
        else if (!this.title.equals(other.title))
            return false;
        if (this.contents == null) {
            if (other.contents != null)
                return false;
        }
        else if (!this.contents.equals(other.contents))
            return false;
        if (this.answer == null) {
            if (other.answer != null)
                return false;
        }
        else if (!this.answer.equals(other.answer))
            return false;
        if (this.explanation == null) {
            if (other.explanation != null)
                return false;
        }
        else if (!this.explanation.equals(other.explanation))
            return false;
        if (this.creatorId == null) {
            if (other.creatorId != null)
                return false;
        }
        else if (!this.creatorId.equals(other.creatorId))
            return false;
        if (this.createdAt == null) {
            if (other.createdAt != null)
                return false;
        }
        else if (!this.createdAt.equals(other.createdAt))
            return false;
        if (this.deletedAt == null) {
            if (other.deletedAt != null)
                return false;
        }
        else if (!this.deletedAt.equals(other.deletedAt))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.articleId == null) ? 0 : this.articleId.hashCode());
        result = prime * result + ((this.title == null) ? 0 : this.title.hashCode());
        result = prime * result + ((this.contents == null) ? 0 : this.contents.hashCode());
        result = prime * result + ((this.answer == null) ? 0 : this.answer.hashCode());
        result = prime * result + ((this.explanation == null) ? 0 : this.explanation.hashCode());
        result = prime * result + ((this.creatorId == null) ? 0 : this.creatorId.hashCode());
        result = prime * result + ((this.createdAt == null) ? 0 : this.createdAt.hashCode());
        result = prime * result + ((this.deletedAt == null) ? 0 : this.deletedAt.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Problem (");

        sb.append(id);
        sb.append(", ").append(articleId);
        sb.append(", ").append(title);
        sb.append(", ").append(contents);
        sb.append(", ").append(answer);
        sb.append(", ").append(explanation);
        sb.append(", ").append(creatorId);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(deletedAt);

        sb.append(")");
        return sb.toString();
    }
}
