/*
 * This file is generated by jOOQ.
 */
package jooq.jooq_dsl.tables;


import java.time.LocalDateTime;
import java.util.Collection;

import jooq.jooq_dsl.DefaultSchema;
import jooq.jooq_dsl.Keys;
import jooq.jooq_dsl.tables.records.SubmitHistoryRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SubmitHistory extends TableImpl<SubmitHistoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>SUBMIT_HISTORY</code>
     */
    public static final SubmitHistory SUBMIT_HISTORY = new SubmitHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SubmitHistoryRecord> getRecordType() {
        return SubmitHistoryRecord.class;
    }

    /**
     * The column <code>SUBMIT_HISTORY.ID</code>.
     */
    public final TableField<SubmitHistoryRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>SUBMIT_HISTORY.PROBLEM_ID</code>.
     */
    public final TableField<SubmitHistoryRecord, Long> PROBLEM_ID = createField(DSL.name("PROBLEM_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>SUBMIT_HISTORY.MEMBER_ID</code>.
     */
    public final TableField<SubmitHistoryRecord, Long> MEMBER_ID = createField(DSL.name("MEMBER_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>SUBMIT_HISTORY.SUBMIT_ANS</code>.
     */
    public final TableField<SubmitHistoryRecord, String> SUBMIT_ANS = createField(DSL.name("SUBMIT_ANS"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>SUBMIT_HISTORY.IS_SOLVED</code>.
     */
    public final TableField<SubmitHistoryRecord, Boolean> IS_SOLVED = createField(DSL.name("IS_SOLVED"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>SUBMIT_HISTORY.CREATED_AT</code>.
     */
    public final TableField<SubmitHistoryRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>SUBMIT_HISTORY.DELETED_AT</code>.
     */
    public final TableField<SubmitHistoryRecord, LocalDateTime> DELETED_AT = createField(DSL.name("DELETED_AT"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "");

    private SubmitHistory(Name alias, Table<SubmitHistoryRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SubmitHistory(Name alias, Table<SubmitHistoryRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>SUBMIT_HISTORY</code> table reference
     */
    public SubmitHistory(String alias) {
        this(DSL.name(alias), SUBMIT_HISTORY);
    }

    /**
     * Create an aliased <code>SUBMIT_HISTORY</code> table reference
     */
    public SubmitHistory(Name alias) {
        this(alias, SUBMIT_HISTORY);
    }

    /**
     * Create a <code>SUBMIT_HISTORY</code> table reference
     */
    public SubmitHistory() {
        this(DSL.name("SUBMIT_HISTORY"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<SubmitHistoryRecord, Long> getIdentity() {
        return (Identity<SubmitHistoryRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<SubmitHistoryRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_6;
    }

    @Override
    public SubmitHistory as(String alias) {
        return new SubmitHistory(DSL.name(alias), this);
    }

    @Override
    public SubmitHistory as(Name alias) {
        return new SubmitHistory(alias, this);
    }

    @Override
    public SubmitHistory as(Table<?> alias) {
        return new SubmitHistory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SubmitHistory rename(String name) {
        return new SubmitHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SubmitHistory rename(Name name) {
        return new SubmitHistory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SubmitHistory rename(Table<?> name) {
        return new SubmitHistory(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SubmitHistory where(Condition condition) {
        return new SubmitHistory(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SubmitHistory where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SubmitHistory where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SubmitHistory where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SubmitHistory where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SubmitHistory where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SubmitHistory where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SubmitHistory where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SubmitHistory whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SubmitHistory whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
