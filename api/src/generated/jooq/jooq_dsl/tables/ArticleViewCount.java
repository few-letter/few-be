/*
 * This file is generated by jOOQ.
 */
package jooq.jooq_dsl.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import jooq.jooq_dsl.DefaultSchema;
import jooq.jooq_dsl.Indexes;
import jooq.jooq_dsl.Keys;
import jooq.jooq_dsl.tables.records.ArticleViewCountRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ArticleViewCount extends TableImpl<ArticleViewCountRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ARTICLE_VIEW_COUNT</code>
     */
    public static final ArticleViewCount ARTICLE_VIEW_COUNT = new ArticleViewCount();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ArticleViewCountRecord> getRecordType() {
        return ArticleViewCountRecord.class;
    }

    /**
     * The column <code>ARTICLE_VIEW_COUNT.ARTICLE_ID</code>.
     */
    public final TableField<ArticleViewCountRecord, Long> ARTICLE_ID = createField(DSL.name("ARTICLE_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>ARTICLE_VIEW_COUNT.VIEW_COUNT</code>.
     */
    public final TableField<ArticleViewCountRecord, Long> VIEW_COUNT = createField(DSL.name("VIEW_COUNT"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>ARTICLE_VIEW_COUNT.CATEGORY_CD</code>.
     */
    public final TableField<ArticleViewCountRecord, Byte> CATEGORY_CD = createField(DSL.name("CATEGORY_CD"), SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>ARTICLE_VIEW_COUNT.DELETED_AT</code>.
     */
    public final TableField<ArticleViewCountRecord, LocalDateTime> DELETED_AT = createField(DSL.name("DELETED_AT"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "");

    private ArticleViewCount(Name alias, Table<ArticleViewCountRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ArticleViewCount(Name alias, Table<ArticleViewCountRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>ARTICLE_VIEW_COUNT</code> table reference
     */
    public ArticleViewCount(String alias) {
        this(DSL.name(alias), ARTICLE_VIEW_COUNT);
    }

    /**
     * Create an aliased <code>ARTICLE_VIEW_COUNT</code> table reference
     */
    public ArticleViewCount(Name alias) {
        this(alias, ARTICLE_VIEW_COUNT);
    }

    /**
     * Create a <code>ARTICLE_VIEW_COUNT</code> table reference
     */
    public ArticleViewCount() {
        this(DSL.name("ARTICLE_VIEW_COUNT"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ARTICLE_VIEW_COUNT_IDX1, Indexes.ARTICLE_VIEW_COUNT_IDX2);
    }

    @Override
    public UniqueKey<ArticleViewCountRecord> getPrimaryKey() {
        return Keys.ARTICLE_VIEW_COUNT_PK;
    }

    @Override
    public ArticleViewCount as(String alias) {
        return new ArticleViewCount(DSL.name(alias), this);
    }

    @Override
    public ArticleViewCount as(Name alias) {
        return new ArticleViewCount(alias, this);
    }

    @Override
    public ArticleViewCount as(Table<?> alias) {
        return new ArticleViewCount(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ArticleViewCount rename(String name) {
        return new ArticleViewCount(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ArticleViewCount rename(Name name) {
        return new ArticleViewCount(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ArticleViewCount rename(Table<?> name) {
        return new ArticleViewCount(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ArticleViewCount where(Condition condition) {
        return new ArticleViewCount(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ArticleViewCount where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ArticleViewCount where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ArticleViewCount where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ArticleViewCount where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ArticleViewCount where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ArticleViewCount where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ArticleViewCount where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ArticleViewCount whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ArticleViewCount whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
